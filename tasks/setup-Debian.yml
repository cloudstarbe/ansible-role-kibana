---
- name: Get Kibana Major Version
  ansible.builtin.set_fact: "kibana_major_version={{ es_version.split('.')[0] }}.x"
  when:
      - es_major_version is undefined

- name: Ensure dependencies are installed.
  ansible.builtin.apt:
    name:
      - apt-transport-https
      - gnupg2
    state: present

- name: Add Elasticsearch apt key.
  ansible.builtin.apt_key:
    url: https://artifacts.elastic.co/GPG-KEY-elasticsearch
    state: present

- name: Add Kibana repository.
  ansible.builtin.apt_repository:
    repo: 'deb https://artifacts.elastic.co/packages/{{ kibana_major_version }}/apt stable main'
    state: present
    update_cache: true

- name: create user {{ kibana_user }}
  ansible.builtin.user:
    name: "{{ kibana_user }}"
    shell: /bin/false
    home: /nonexistent
    create_home: false
    system: true

- name: "create folder {{ kibana_ssl_certificate_path }}"
  ansible.builtin.file:
    path: "{{ kibana_ssl_certificate_path }}"
    state: directory
    owner: "root"
    group: "{{ kibana_user }}"
    mode: 0755

- name: Check if Certificate exists
  ansible.builtin.stat:
    path: "{{ cert_client_certs_dir }}/{{ es_ssl_name }}.pem"
  register: stat_sslcert
  when:
    - es_ssl_certificate_path is defined
    - es_ssl_name is defined

- name: "Copy ElastiSearch Cert {{ es_ssl_name }}"
  ansible.builtin.copy:
    src: "{{ cert_client_certs_dir }}/{{ es_ssl_name }}.{{ item }}"
    dest: "{{ kibana_ssl_certificate_path }}"
    mode: 0440
    owner: "root"
    group: "{{ kibana_user }}"
    remote_src: true
  # no_log: true
  with_items:
    - pem
    - key
  when:
    - stat_sslcert.stat.exists is defined and stat_sslcert.stat.exists
    - es_ssl_certificate_path is defined
    - es_ssl_name is defined


- name: Debian - Get installed kibana version
  ansible.builtin.command: dpkg-query --showformat='${Version}' --show {{ kibana_package }}
  register: installed_kibana_version
  failed_when: false
  changed_when: false
  check_mode: false

- name: Debian - unhold kibana version
  dpkg_selections:
    name: "{{ kibana_package }}"
    selection: "install"
  when: not es_version_lock or (installed_kibana_version.stdout and installed_kibana_version.stdout != kibana_version)

- name: Debian - Ensure kibana is installed
  ansible.builtin.apt:
    name: '{{ kibana_package }}{% if kibana_version is defined and kibana_version != "" %}={{ kibana_version }}{% endif %}'
    state: present
  notify: Restart kibana

- name: Debian - hold kibana version
  dpkg_selections:
    name: "{{ kibana_package }}"
    selection: "hold"
  when: kibana_version_lock
